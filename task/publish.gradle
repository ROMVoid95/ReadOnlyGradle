apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

//signing {
//	sign configurations.archives
//}

group = GROUP
version = VERSION

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/ROMVoid95/ReadOnlyGradle")
			credentials {
				username = secret.NAME
				password = secret.GHTOKEN
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			pom {
				name = POM_NAME
				description = POM_DESCRIPTION
				url = POM_URL
				licenses {
					license {
						name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                        distribution = POM_LICENSE_DIST

					}
				}
				developers {
					developer {
						id = POM_DEVELOPER_ID
						name = POM_DEVELOPER_NAME
						email = POM_DEVELOPER_EMAIL
					}
				}
				scm {
                       url = POM_SCM_URL
                       connection = POM_SCM_CONNECTION
                       developerConnection = POM_SCM_DEV_CONNECTION
				}
			}
			from(components.java)
		}
	}
}

signing {
	sign publishing.publications.gpr
}

task customize << {
	println secret.UNAME
	println secret.GHTOKEN
	println POM_DEVELOPER_ID
	println POM_DEVELOPER_NAME
	println POM_SCM_URL
	println POM_NAME
	println POM_GROUP
}

task checkRelease << {
	def readmeVersion = file('README.md').readLines().find { it.contains("$GROUP:$POM_NAME:") }?.trim()

	if (readmeVersion == null) {
		throw new ProjectConfigurationException("Missing README version string", null)
	}

	if (!readmeVersion.contains(":$version")) {
		throw new ProjectConfigurationException("README version string: $readmeVersion must match release version: $version", null)
	}

	def changelogVersion = file('CHANGELOG.md').readLines().find { it.contains("### $version") }
	if (changelogVersion == null) {
		throw new ProjectConfigurationException("CHANGELOG does not contain changes for release version: $version", null)
	}
}

task printBuildScriptClasspath << {
println project.buildscript.configurations.classpath.asPath
}